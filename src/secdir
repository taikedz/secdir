#!/bin/bash

# Script to mount / unmount singular secure diredctories

# Released under BSD license:
# Copyright (c) 2016 Tai Kedzierski.
# All rights reserved.
#
# Redistribution and use in source and binary forms are permitted
# provided that the above copyright notice and this paragraph are
# duplicated in all such forms and that any documentation,
# advertising materials, and other materials related to such
# distribution and use acknowledge that the software was developed
# by Tai Kedzierski. The name of Tai Kedzierski
# may not be used to endorse or promote products derived
# from this software without specific prior written permission.
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

### secdir Usage:help
#
#Manage, Mount and Unmount EncFS encrypted directory
#
#$(basename $0) {list|init}
#$(basename $0) {mount|unmount|open|close} DIRNAME [LINK ...]
#
#Uses a .enc directory in the current working directory to store the encrypted files.
#
#The secure directory is mounted in the current working directory.
#
#OPTIONS
#
#list
#	list secure directories configured at current working directory
#
#init
#	set current working directory up as a location for secure directories
#
#mount
#open
#	mount the secure directory. If it does not exist, offers to create it.
#
#unmount
#close
#	unmount a mounted secure directory.
###/doc

#%include bashout askuser autohelp abspath

set -u

function linkall {
	while [[ -n "$@" ]]; do
		local TGT=$(abspath "$1") ; shift
		ln -s "$TGT" "$OPEDIR" && echo "$TGT" >> "$PWD/.enc/${CUST}.links"
	done
}

function delinkall {
	if [[ ! -f "$PWD/.enc/${CUST}.links" ]]; then return 0; fi
	cat "$PWD/.enc/${CUST}.links" | while read lfile; do
		unlink "$lfile"
		sed "/$(echo "$lfile"|sed 's|/|\\/|g')/d" -i "$PWD/.enc/${CUST}.links"
	done
	[[ $(wc -l "$PWD/.enc/${CUST}.links") -lt 1 ]] && rm "$PWD/.enc/${CUST}.links"
}

if [[ ! -f /usr/bin/encfs ]]; then
	encfs # try calling it anyway; some systems may hint which package needs installing
	faile "Please install package 'encfs' "
fi

if [[ -z "$@" ]]; then
	faile "No arguments given."
fi

ACTION="$1" ; shift

case "$ACTION" in
list)
	for x in $(ls .enc); do
		infoe "$x"
	done
	exit 0
	;;
init)
	mkdir -p "$PWD/.enc" && infoe "secdir has been set up for use in $PWD"
	;;
esac

if [[ ! -d "$PWD/.enc" ]]; then
	faile "Current directory $PWD is not a valid secdir location."
fi


if [[ -z "$@" ]]; then
	faile "You must specify the name of a secure directory to load"
fi

CUST="$1" ; shift
SECDIR="$PWD/.enc/$CUST"
OPEDIR="$PWD/$CUST"

case "$ACTION" in
	mount|open)
		infoe "Opening $CUST"
		mkdir -p "$OPEDIR"
		encfs "$SECDIR" "$OPEDIR"
		linkall $*
		;;
	unmount|close)
		infoe "Closing $CUST"
		if delinkall ; then
			fusermount -u "$OPEDIR" && rmdir "$OPEDIR"
		else
			faile 3 "Could not unlink some directories:\n$( cat "$PWD/.enc/${CUST}.links")"
		fi
		;;
	*)
		faile "Invalid action $ARG. Use 'mount' or 'unmount' followed by the directory name."
		;;
esac
