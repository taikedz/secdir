#!/bin/bash

# Script to mount / unmount singular secure diredctories

# Released under BSD license:
# Copyright (c) 2016 Tai Kedzierski.
# All rights reserved.
#
# Redistribution and use in source and binary forms are permitted
# provided that the above copyright notice and this paragraph are
# duplicated in all such forms and that any documentation,
# advertising materials, and other materials related to such
# distribution and use acknowledge that the software was developed
# by Tai Kedzierski. The name of Tai Kedzierski
# may not be used to endorse or promote products derived
# from this software without specific prior written permission.
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

### secdir Usage:help
#
# Manage, Mount and Unmount EncFS encrypted directory
#
# $(basename $0) {list|init}
# $(basename $0) {mount|unmount|open|close} DIRNAME [LINK ...]
#
# Uses a .enc directory in the current working directory to store the encrypted files.
#
# The secure directory is mounted in the current working directory.
#
# OPTIONS
#
# list
#	list secure directories configured at current working directory
#
# init
#	set current working directory up as a location for secure directories
#
# mount
# open
#	mount the secure directory. If it does not exist, offers to create it.
#
# unmount
# close
#	unmount a mounted secure directory.
###/doc

#%include bashout.sh askuser.sh autohelp.sh abspath.sh

set -euo pipefail

SECSTORE="$(abspath secdir.enc)"

open_dir() {
	infoe "Opening $targetname"
	mkdir -p "$mountpoint"
	encfs "$secure_store" "$mountpoint"
}

close_dir() {
	local targetname="$1"; shift
	local secure_store="$SECSTORE/$targetname.d"
	local mountpoint="$PWD/$targetname"

	infoe "Closing $targetname"

	# FIXME - search up the current path to look for targetname

	fusermount -u "$mountpoint" && rmdir "$mountpoint"
}

init_script() {

	if [[ ! -f /usr/bin/encfs ]]; then
		encfs # try calling it anyway; some systems may hint which package needs installing
		faile "Please install package 'encfs' "
	fi

	if [[ -z "$*" ]]; then
		faile "No arguments given."
	fi

}

main() {
	local ACTION="$1" ; shift
	local targetname="$1" ; shift

	case "$ACTION" in
	list)
		if [[ ! -d "$SECSTORE" ]]; then
			faile "No secure profiles stored here."
		fi

		for x in $(ls "$SECSTORE"/*.d); do
			infoe "$x"
		done
		exit
		;;
	init)
		mkdir -p "$SECSTORE" && infoe "secdir has been set up for use in $PWD"
		;;
	mount|open)
		open_dir "$targetname"
		;;
	unmount|close)
		close_dir "$targetname"
		;;
	*)
		faile "Invalid action $ARG. Use 'mount' or 'unmount' followed by the directory name."
		;;
	esac
}

notest main "$@"
