#!/bin/bash

# Script to mount / unmount singular secure diredctories


### Secure Directories Usage:help
#
# Manage, Mount and Unmount EncFS encrypted directory
#
# secdir {list|init}
# secdir {mount|unmount|open|close} DIRNAME [LINK ...]
#
# Uses a .enc directory in the current working directory to store the encrypted files.
#
# The secure directory is mounted in the current working directory.
#
# OPTIONS
#
# init
#	set current working directory up as a location for secure directories
#	(can also convert old secdir folders to the new format)
#
# list
#	list secure directories configured at current working directory
#
# open
#	mount the secure directory. If it does not exist, offers to create it.
#
# close
#	unmount a mounted secure directory.
#
# CONFIGURATION
# -------------
#
# You can edit the configuration script in secdir.enc/config.sh
#
# The following variables control secdir's behaviour
#
# SEC_LOADLOCALLY
# 	Default: true
#
# 	If set to false, prevents secdir from mounting the plaintext data in the local directory.
#
# 	This should be set to false when storing the secure data on a network share or in a DropBox/Skydrive/etc
#
# SEC_MOUNTROOT
# 	Default: current working directory
#
# 	The location at which to mount secure directories.
#
# 	Useful in conjunction with SEC_LOADLOCALLY to specify a safe place to mount plaintext data.
#
# AUTHOR
# ------
#
# Copyright (c) 2016-2017 Tai Kedzierski.
# Provided under the Gnu General Public License v3
#
###/doc

#!/bin/bash


MODE_DEBUG=no
MODE_DEBUG_VERBOSE=no

### debuge MESSAGE Usage:bbuild
# print a blue debug message to stderr
# only prints if MODE_DEBUG is set to "yes"
###/doc
function debuge {
	if [[ "$MODE_DEBUG" = yes ]]; then
		echo -e "${CBBLU}DEBUG:$CBLU$*$CDEF" 1>&2
	fi
}

### infoe MESSAGE Usage:bbuild
# print a green informational message to stderr
###/doc
function infoe {
	echo -e "$CGRN$*$CDEF" 1>&2
}

### warne MESSAGE Usage:bbuild
# print a yellow warning message to stderr
###/doc
function warne {
	echo -e "${CBYEL}WARN:$CYEL $*$CDEF" 1>&2
}

### faile [CODE] MESSAGE Usage:bbuild
# print a red failure message to stderr and exit with CODE
# CODE must be a number
# if no code is specified, error code 127 is used
###/doc
function faile {
	local ERCODE=127
	local numpat='^[0-9]+$'

	if [[ "$1" =~ $numpat ]]; then
		ERCODE="$1"; shift
	fi

	echo "${CBRED}ERROR FAIL:$CRED$*$CDEF" 1>&2
	exit $ERCODE
}

function dumpe {
	echo -n "[1;35m$*" 1>&2
	echo -n "[0;35m" 1>&2
	cat - 1>&2
	echo -n "[0m" 1>&2
}

function breake {
	if [[ "$MODE_DEBUG" != yes ]]; then
		return
	fi

	read -p "${CRED}BREAKPOINT: $* >$CDEF " >&2
	if [[ "$REPLY" =~ $(echo 'quit|exit|stop') ]]; then
		faile "ABORT"
	fi
}

### Auto debug Usage:main
# When included, bashout processes a special "--debug" flag
#
# It does not remove the debug flag from arguments.
###/doc

if [[ "$*" =~ --debug ]]; then
	MODE_DEBUG=yes

	if [[ "$MODE_DEBUG_VERBOSE" = yes ]]; then
		set -x
	fi
fi
#!/bin/bash

### Colours for bash Usage:bbuild
# A series of colour flags for use in outputs.
#
# Example:
# 	
# 	echo "${CRED}Some red text ${CBBLU} some blue text $CDEF some text in the terminal's default colour"
#
# Colours available:
#
# CDEF -- switches to the terminal default
#
# CRED, CBRED -- red and bright/bold red
# CGRN, CBGRN -- green and bright/bold green
# CYEL, CBYEL -- yellow and bright/bold yellow
# CBLU, CBBLU -- blue and bright/bold blue
# CPUR, CBPUR -- purple and bright/bold purple
#
###/doc

export CRED="[31m"
export CGRN="[32m"
export CYEL="[33m"
export CBLU="[34m"
export CPUR="[35m"
export CBRED="[1;31m"
export CBGRN="[1;32m"
export CBYEL="[1;33m"
export CBBLU="[1;34m"
export CBPUR="[1;35m"
export CDEF="[0m"
### Helper for version management Usage:bbuild
# Requires a version.bbuild in the current directory to work
###/doc

#%VERSIONFILE
BBVERSION_MAJOR=0
BBVERSION_MINOR=2
BBVERSION_POINT=0
BBVERSION_FLAG=release
BBVERSION_PROGRAM=secdir
BBVERSION_BUILDDATE=2017-06-27
BBVERSION_BUILD=27

function bbns_version_infoe {
	type infoe 2>&1|if grep 'not found' -q; then
		echo "$*"
	else
		infoe "$*"
	fi
}

function bbns_version_showversion {
	bbns_version_infoe "$BBVERSION_PROGRAM : $(bbns_version_genversion)"
	exit
}

function bbns_version_genversion {
	echo "$BBVERSION_MAJOR.$BBVERSION_MINOR.$BBVERSION_POINT ($BBVERSION_FLAG build $BBVERSION_BUILD) $BBVERSION_BUILDDATE"
}

if [[ "$*" =~ --version ]]; then
	bbns_version_showversion
fi

### notest FUNCTION ARGUMENTS Usage:bbuild
#
# This function performs a simple test to see if the "BBSETTESTMODE" variable is set to the string "test mode"
#
# If so, it does NOT call the function. In all other cases, the function is called with the arguments.
#
# The purpose of this function is to allow a simple method to encourage testability: source notest.sh in your test script, and set the BBTESTMODE variable to "test mode" to prevent the script from running.
#
# Example test target script, "test_target.sh":
#
#	#%include notest.sh
#
# 	function action1 { ... }
#
# 	function action2 { ... }
#
# 	function main {
# 		action1
# 		action2
# 	}
#
# 	notest main "$@"
#
# Example test script:
#
# 	. ~/.local/lib/bbuild/notest.sh
# 	BBTESTMODE="test mode"
#
# 	# main will not run
# 	. test_target.sh
#
# 	action1 || echo failed action1
#
# 	action2 || echo failed action2
#
# You can source a file with this kind of structure without the risk of triggering its runtime. This allows the file to be sourced and tested safely.
#
###/doc

function notest {
	local funcall="$1"; shift

	if [[ "${BBTESTMODE:-}" != "test mode" ]]; then
		"$funcall" "$@"
	fi
}
#!/bin/bash

### AskUser Usage:bbuild
# Present the user with questions on stdout
###/doc


yespat='^(yes|YES|y|Y)$'
numpat='^[0-9]+$'
rangepat='[0-9]+,[0-9]+'
listpat='^[0-9 ]+$'
blankpat='^ *$'

### uconfirm Usage:bbuild
# Ask the user to confirm a closed question. Defaults to no
#
# returns 0 on successfully match 'y' or 'yes'
# returns 1 otherwise
###/doc
function uconfirm {
	read -p "$* [y/N] > " 1>&2
	if [[ "$REPLY" =~ $yespat ]]; then
		return 0
	else
		return 1
	fi
}

### uask Usage:bbuild
# Ask the user to provide some text
#
# returns the entered text
###/doc
function uask {
	read -p "$* : " 1>&2
	echo $REPLY
}

### uchoose_multi Usage:bbuild
# Allows the user to choose from multiple choices
#
# uchose_multi MESG CHOICESTRING
#
#
# MESG is a single string token that will be displayed as prompt
#
# CHOICESTRING is a comma-separated, or newline separated, or "\\n"-separated token string
#
# Equivalent strings include:
#
# * `"a\\nb\\nc"` - quoted and explicit newline escapes
# * `"a,b,c"` - quoted and separated with commas
# * `a , b , c` - not quoted, separated by commas
# * (and `a`, `b` and `c` on their own lines)
#
# User input:
#
# User can choose by selecting
#
# * a single item by number
# * a range of numbers (4,7 for range 4 to 7)
# * or a string that matches the pattern
#
# All option lines that match will be returned, one per line
#
# If the user selects nothing, then function returns 1 and an empty stdout
###/doc
function uchoose_multi {
	local mesg=$1; shift
	local choices=$(echo "$*"|sed -r 's/ *, */\n/g')
	debuge "CHOICES: $choices"

	infoe "$mesg:" 
	local choicelist="$(echo -e "$choices"|egrep '^' -n| sed 's/:/: /')"
	echo "$choicelist" 1>&2
	
	local sel=$(uask "Choice")
	if [[ "$sel" =~ $blankpat ]]; then
		return 1

	elif [[ "$sel" =~ $numpat ]] || [[ "$sel" =~ $rangepat ]]; then
		debuge "Number choice [$sel]"
		echo -e "$choices" | sed -n "$sel p"
	
	elif [[ "$sel" =~ $listpat ]]; then
		echo "$choicelist" | egrep "^${sel// /|}:" | sed -r 's/^[0-9]+: //'

	else
		debuge "Pattern choice [$sel]"
		echo -e "$choices"  |egrep "$(echo "$sel"|tr " " '|')"
	fi
	return 0
}

### uchoose Usage:bbuild
# Ask the user to choose an item
#
# Like uchoose_multi, but will loop if the user selects more than one item
#
# If the provides no entry, returns 0
#
# If the user chooses one item, that item is echoed to stdout
###/doc
function uchoose {
	local mesg=$1; shift
	while true; do
		local thechoice="$(uchoose_multi "$mesg" "$*")"
		local lines=$(echo "$thechoice" | wc -l)
		if [[ $lines = 1 ]]; then
			echo "$thechoice"
			return 0
		else
			warne "Too many results"
		fi
	done
}

#!/bin/bash

### printhelp Usage:bbuild
# Write your help as documentation comments in your script
#
# If you need to output the help from a running script, call the
# `printhelp` function and it will print the help documentation
# in the current script to stdout
#
# A help comment looks like this:
#
#	### <title> Usage:help
#	#
#	# <some content>
#	#
#	# end with "###/doc" on its own line (whitespaces before
#	# and after are OK)
#	#
#	###/doc
#
###/doc

CHAR='#'

function printhelp {
	local USAGESTRING=help
	local TARGETFILE=$0
	if [[ -n "$*" ]]; then USAGESTRING="$1" ; shift; fi
	if [[ -n "$*" ]]; then TARGETFILE="$1" ; shift; fi

        echo -e "\n$(basename "$TARGETFILE")\n===\n"
        local SECSTART='^\s*'"$CHAR$CHAR$CHAR"'\s+(.+?)\s+Usage:'"$USAGESTRING"'\s*$'
        local SECEND='^\s*'"$CHAR$CHAR$CHAR"'\s*/doc\s*$'
        local insec="$(mktemp --tmpdir)"; rm "$insec"
        cat "$TARGETFILE" | while read secline; do
                if [[ "$secline" =~ $SECSTART ]]; then
                        touch "$insec"
                        echo -e "\n${BASH_REMATCH[1]}\n---\n"
                elif [[ -f $insec ]]; then
                        if [[ "$secline" =~ $SECEND ]]; then
                                rm "$insec"
                        else
				echo "$secline" | sed -r "s/^\s*$CHAR//g"
                        fi
                fi
        done
        if [[ -f "$insec" ]]; then
                echo "WARNING: Non-terminated help block." 1>&2
		rm "$insec"
        fi
	echo ""
}

### automatic help Usage:main
#
# automatically call help if "--help" is detected in arguments
#
###/doc
if [[ "$@" =~ --help ]]; then
	cols="$(tput cols)"
	printhelp | fold -w "$cols" -s
	exit 0
fi
#!/bin/bash

### abspath Usage:bbuild
# Returns the absolute path of a file/directory
#
# Exposes two functions
#
#     abspath
#     abspath_collapse
#
# Do not use the python-based 'abspath' for intensitve resolution;
# instead, use native 'abspath_collapse' which is at least 170 times
# more efficient, at the cost of perhaps being potentially
# dumber (simply collapses '/./' and '/../').
# 
# Neither utility expands softlinks.
#
# If python is not found, abspath falls back to abspath_collapse systematically.
###/doc

function abspath {
	local newvar=${1//"'"/"\\'"}
	(
		set +eu
		if which python >/dev/null 2>&1; then
			python  -c "import os ; print os.path.abspath('$newvar')"
		elif which python3 >/dev/null 2>&1 ; then
			python3 -c "import os ; print(os.path.abspath('$newvar') )"
		else
			abspath_collapse "$newvar"
		fi
	)
}

# More efficient by a factor of at least 170:1
# compared to spinning up a python process every time
function abspath_collapse {
	local workpath="$1"
	if [[ "${workpath:0:1}" != "/" ]]; then workpath="$PWD/$workpath"; fi
	for x in {1..50}; do # set a limit on how many iterations - only very stupid paths will get us here.
		if [[ "$workpath" =~ '/../' ]] || [[ "$workpath" =~ '/./' ]]; then
			workpath="$(echo "$workpath"|sed -r -e 's#/./#/#g' -e 's#([^/]+)/../#\1/#g' -e 's#/.$##' -e 's#([^/]+)/..$#\1#' )"
		else
			echo "$workpath"
			return 0
		fi
	done
	return 1 # hopefully we never get here
}
#!/bin/bash

### getbin COMMANDS ... Usage:bbuild
#
# Return the first existing binary
#
# Useful for finding an appropriate binary when you know
# different systems may supply binaries under different names.
#
# Returns the full path from `which` for the first executable
# encountered.
#
# Example:
#
# 	getbin markdown_py markdown ./mymarkdown
#
# Tries in turn to get a `markdown_py`, then a `markdown`, and then a local `./mymarkdown`
#
###/doc

function getbin {
	local BINEXE=
	for binname in "$@"; do
		# Some implementations of `which` print error messages
		# Not useful here.
		BINEXE=$(which "$binname" 2>/dev/null)

		if [[ -n "$BINEXE" ]]; then
			echo "$BINEXE"
			return 0
		fi
	done
	return 1
}

### hasbin COMMANDS ... Usage:bbuild
#
# Determine if at least one of the binaries listed is present and installed on the system
#
###/doc

function hasbin {
	[[ -n "$(getbin "$@")" ]]
}

set -euo pipefail

# Whether we can mount here according to prefs
# set as reminder to prevent loading in Dropbox etc
can_mount_in() {
	local location="$(abspath "$1")"; shift

	if [[ "$SEC_LOADLOCALLY" != true ]] && [[ "$location"  =~ "$PWD" ]]; then
		return 1
	fi

	return 0
}

open_dir() {
	: ${SEC_MOUNTROOT="$PWD"}

	local targetname="${1:-}"; shift
	[[ -n "$targetname" ]] || faile "No target provided"

	local secure_store="$SECSTORE/$targetname.d"
	local mountpoint="$(abspath "$SEC_MOUNTROOT/$targetname")"

	can_mount_in "$mountpoint" || faile "Cannot mount here. Set SEC_MOUNTROOT as a target path to mount to instead."

	infoe "Opening $targetname"

	mkdir "$mountpoint" || faile "$mountpoint already exists - refusing to overwrite it."
	debuge encfs "$secure_store" "$mountpoint"
	encfs "$secure_store" "$mountpoint"
}

close_dir() {
	local targetname="${1:-}"; shift
	[[ -n "$targetname" ]] || faile "No target provided"
	targetname="${targetname%/}" # in case user used aut-completion on directory

	infoe "Closing $targetname ..."

	local mountpoint="$(get_encfs_mountpoint "$targetname")"

	[[ -n "$mountpoint" ]] || faile "No such mount"

	fusermount -u "$mountpoint" && rmdir "$mountpoint" || faile "Could not unmount $mountpoint"
}

get_encfs_mountpoint() {
	local targetname="$1"; shift

	# This is brittle due to detecting between 'on' and 'type'
	# but we do this to ensure we catch the case where there are spaces in the path
	mount | egrep ^encfs|grep "$targetname"| grep -Po 'on .+? type ' | sed -r -e 's/^on //' -e 's/ type ?$//'
}

precheck() {

	SECSTORE="$(abspath secdir.enc)"
	SECCONF="${SECSTORE:-}/config.sh"

	if [[ -f "$SECCONF" ]]; then
		. "$SECCONF"
	fi

	if ! hasbin encfs; then
		encfs # try calling it anyway; some systems may hint which package needs installing
		faile "Please install 'encfs' "
	fi

	if ! hasbin fusermount; then
		fusermount
		faile "FUSE filesystem utilities are not installed."
	fi

}

list_dirs() {
	if [[ ! -d "$SECSTORE" ]]; then
		faile "No secure profiles stored here."
	fi

	local items=($(ls -d "$SECSTORE"/*.d))
	for item in "${items[@]}"; do
		local dname="$(basename "$item")"
		infoe "${dname%.d}"
	done
}

setup_config() {
	local seclocal=true
	local mtroot="./"

	uconfirm "Is $PWD in a network-shared location, or in a DropBox/Google Drive/etc location ?" && {
		seclocal=false
		mtroot="$(uask "Please specify a path to mount decrypted folders at")"
	} || :

	echo -e "SEC_LOADLOCALLY=$seclocal\nSEC_MOUNTROOT='$mtroot'" > "$SECCONF"
}

secdir_init() {
	debuge "Checking $SECSTORE"
	[[ ! -d "$SECSTORE" ]] && { mkdir "$SECSTORE" || faile "Cannot initialize a secure directory in $PWD" ; } || :

	debuge "Checking $SECCONF"
	[[ ! -f "$SECCONF" ]] && setup_config || faile "Secure store is already set up."

	for store in secdir.enc/* ; do
		[[ -f "$store" ]] && continue || :

		mv "$store" "$store.d"
	done
	
	infoe "secdir has been set up for use in $PWD; configuration is in $SECCONF"
}

main() {
	[[ -n "$*" ]] || {
		warne "No arguments supplied. Try 'secdir --help' for more information."
		exit 1
	}

	local ACTION="$1" ; shift

	local targetname=''
	[[ -n "$*" ]] && { targetname="$1" ; shift; } || :

	precheck "$@"

	case "$ACTION" in
	list)
		list_dirs "$@"
		;;
	init)
		secdir_init "$@"
		;;
	open)
		open_dir "$targetname"
		;;
	close)
		close_dir "$targetname"
		;;
	*)
		faile "Invalid action $ARG. Use 'mount' or 'unmount' followed by the directory name."
		;;
	esac
}

notest main "$@"
